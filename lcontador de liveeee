<!doctype html>
<html lang="pt-BR">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Gerar overlay (YouTube → só número)</title>
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@600;800&display=swap" rel="stylesheet">
<style>
  :root { --bg:#0f1115; --card:#181b22; --border:#2a2f3a; --text:#fff; --muted:#aab1c5; --primary:#d2902b; }
  * { box-sizing:border-box } body { margin:0; font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial; background:var(--bg); color:var(--text); }
  .wrap { max-width:720px; margin:56px auto; padding:0 16px; }
  h1 { margin:0 0 10px; letter-spacing:-.02em }
  p { margin:0 0 20px; color:var(--muted) }
  .card { background:var(--card); border:1px solid var(--border); border-radius:14px; padding:16px; }
  .row { display:flex; gap:10px; align-items:center; }
  input[type=url] { flex:1; padding:12px 14px; border-radius:10px; border:1px solid var(--border); background:#111319; color:var(--text) }
  button { padding:12px 18px; border:0; border-radius:10px; background:var(--primary); color:#111; font-weight:800; cursor:pointer }
  .out { margin-top:14px; display:flex; gap:10px; align-items:center }
  .linkbox { flex:1; font-size:13px; color:var(--muted); background:#0f1115; border:1px dashed var(--border); padding:10px 12px; border-radius:10px; overflow:auto; white-space:nowrap }
  small { color:var(--muted) }
</style>
</head>
<body>
  <div class="wrap">
    <h1>Overlay de espectadores (YouTube → só número)</h1>
    <p>Cole o link da <b>live</b> do YouTube e gere um link para usar no OBS (Browser Source).</p>
    <div class="card">
      <div class="row">
        <input id="live" type="url" placeholder="Ex.: https://www.youtube.com/watch?v=VIDEO_ID ou https://youtu.be/VIDEO_ID ou https://youtube.com/@canal/live" />
        <button id="go">Gerar link</button>
      </div>
      <div class="out" id="out" style="display:none">
        <div id="url" class="linkbox"></div>
        <button id="copy">Copiar</button>
      </div>
      <small>Dica: você pode adicionar <code>&transparent=1</code>, <code>&interval=10</code>, <code>&fontsize=64</code>, <code>&debug=1</code> ao link.</small>
    </div>
  </div>
<script>
  function buildUrl(live){
    const base = new URL(window.location.href);
    base.pathname = base.pathname.replace(/index\.html?$/i, 'number.html');
    base.search = ''; base.hash='';
    const u = new URL(base.href);
    u.searchParams.set('live', live);
    return u.toString();
  }
  const $live = document.getElementById('live');
  const $out = document.getElementById('out');
  const $url = document.getElementById('url');
  const $copy = document.getElementById('copy');
  document.getElementById('go').addEventListener('click', () => {
    const live = ($live.value || '').trim();
    if(!live){ alert('Cole o link da live do YouTube.'); return; }
    try{ new URL(live) } catch { alert('Link inválido'); return; }
    $url.textContent = buildUrl(live);
    $out.style.display = 'flex';
  });
  $copy.addEventListener('click', async ()=>{
    try{ await navigator.clipboard.writeText($url.textContent); $copy.textContent='Copiado!'; setTimeout(()=> $copy.textContent='Copiar', 1200); }
    catch { prompt('Copie o link:', $url.textContent); }
  });
</script>
</body>
</html>

<!doctype html>
<html lang="pt-BR">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Número de espectadores — YouTube</title>
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@800&display=swap" rel="stylesheet">
<style>
  html,body{height:100%;margin:0;background:transparent}
  body{display:flex;align-items:flex-start;justify-content:flex-start;padding:8px}
  .num{color:#fff;font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial;font-weight:800;font-variant-numeric:tabular-nums;text-shadow:0 2px 4px rgba(0,0,0,.45)}
  .debug{position:fixed;right:6px;bottom:6px;background:rgba(0,0,0,.5);color:#ddd;font:12px/1.4 system-ui,Segoe UI,Arial;padding:6px 8px;border-radius:6px;max-width:50vw;display:none;white-space:pre-wrap}
</style>
</head>
<body>
  <div id="n" class="num">0</div>
  <div id="dbg" class="debug"></div>
<script>
  function get(name, d){ const u=new URL(window.location.href); return u.searchParams.get(name) ?? d; }
  const debugMode = get('debug','0') === '1';

  function showDebug(msg){
    if(!debugMode) return;
    const box = document.getElementById('dbg');
    box.style.display = 'block';
    const now = new Date().toLocaleTimeString();
    box.textContent = `[${now}] ` + msg;
  }

  function parseIntLoose(v){
    if(typeof v === 'number') return v;
    if(typeof v === 'string'){
      const m = v.match(/[0-9]+/); if(m) return parseInt(m[0],10);
    }
    return null;
  }

  function extractYouTubeId(u){
    try{
      const url = new URL(u);
      if(url.hostname.endsWith('youtu.be')){
        return url.pathname.replace('/', '').split('?')[0];
      }
      const v = url.searchParams.get('v');
      if(v) return v;
      // /live/VIDEO_ID
      const m = url.pathname.match(/\/live\/([A-Za-z0-9_-]{6,})/);
      if(m) return m[1];
      // /channel/UCxxxxxx/live -> não contém ID; resolveremos via search API
      // /@handle/live -> resolveremos via channels API
      return null;
    }catch{ return null; }
  }

  async function fetchJSON(url){
    const res = await fetch(url);
    const ct = res.headers.get('content-type')||'';
    let body;
    try { body = ct.includes('json') ? await res.json() : JSON.parse(await res.text()); }
    catch(e){ body = { __raw: await res.text() }; }
    if(!res.ok){
      throw new Error(`HTTP ${res.status}: ${res.statusText} | URL: ${url} | body: ${JSON.stringify(body).slice(0,200)}`);
    }
    return body;
  }

  function getCfg(){ return fetchJSON('config.json'); }

  function resolve(obj, path){
    if(!path) return parseIntLoose(obj);
    const parts = path.split('.').filter(Boolean);
    let cur = obj;
    for(const p of parts){
      if(p === '0' && Array.isArray(cur)){ cur = cur[0]; continue; }
      if(cur && (p in cur)) cur = cur[p]; else return null;
    }
    return parseIntLoose(cur);
  }

  async function resolveVideoIdFromLiveUrl(live, cfg){
    const url = new URL(live);
    // /watch?v=... ou youtu.be/..., tentamos direto
    const direct = extractYouTubeId(live);
    if(direct) return direct;

    // /@handle/live -> pegar channelId
    const path = url.pathname;
    const handleMatch = path.match(/\/@([^\/]+)\/live/);
    if(handleMatch){
      const handle = '@' + handleMatch[1];
      const chUrl = cfg.channelsByHandleTemplate.replace('{handle}', encodeURIComponent(handle)).replace('{key}', encodeURIComponent(cfg.apiKey||''));
      showDebug(`Resolvendo handle ${handle} → channelId ...`);
      const ch = await fetchJSON(chUrl);
      const channelId = ch?.items?.[0]?.id;
      if(channelId){
        const searchUrl = cfg.liveSearchTemplate.replace('{channelId}', encodeURIComponent(channelId)).replace('{key}', encodeURIComponent(cfg.apiKey||''));
        showDebug(`Buscando live atual do canal ${channelId} ...`);
        const s = await fetchJSON(searchUrl);
        const vid = s?.items?.[0]?.id?.videoId;
        if(vid) return vid;
        throw new Error('Nenhuma live ao vivo encontrada para esse canal.');
      }
      throw new Error('Não consegui resolver o @handle para channelId.');
    }

    // /channel/UCxxxx/live -> usar o channelId diretamente
    const chMatch = path.match(/\/channel\/(UC[0-9A-Za-z_-]{10,})\/live/);
    if(chMatch){
      const channelId = chMatch[1];
      const searchUrl = cfg.liveSearchTemplate.replace('{channelId}', encodeURIComponent(channelId)).replace('{key}', encodeURIComponent(cfg.apiKey||''));
      showDebug(`Buscando live atual do canal ${channelId} ...`);
      const s = await fetchJSON(searchUrl);
      const vid = s?.items?.[0]?.id?.videoId;
      if(vid) return vid;
      throw new Error('Nenhuma live ao vivo encontrada nesse canal.');
    }

    throw new Error('Não consegui extrair o VIDEO_ID (tente colar a URL com watch?v=... ou youtu.be/...).');
  }

  async function getConcurrentViewers(vid, cfg){
    const url = cfg.videosTemplate.replace('{id}', encodeURIComponent(vid)).replace('{key}', encodeURIComponent(cfg.apiKey||''));
    const json = await fetchJSON(url);
    const val = resolve(json, cfg.concurrentViewersPath || 'items.0.liveStreamingDetails.concurrentViewers');
    return val;
  }

  (async function init(){
    const live = get('live','');
    const fontsize = parseInt(get('fontsize',''),10) || 42;
    const interval = Math.max(5, Math.min(120, parseInt(get('interval',''),10) || 10));
    const el = document.getElementById('n'); el.style.fontSize = fontsize + 'px';

    if(!live){ document.body.innerHTML='<div style="color:#fff;font-family:Inter">Erro: use <code>?live=URL_DA_LIVE</code></div>'; return; }

    try{
      const cfg = await getCfg();
      const vid = await resolveVideoIdFromLiveUrl(live, cfg);
      showDebug(`VIDEO_ID: ${vid}`);

      async function tick(){
        try{
          const v = await getConcurrentViewers(vid, cfg);
          if(typeof v === 'number'){ el.textContent = new Intl.NumberFormat('pt-BR').format(v); showDebug(`OK: ${v} viewers`); }
          else { showDebug('Sem número (talvez offline ou live privada)'); }
        }catch(e){ showDebug(String(e)); }
      }
      await tick();
      setInterval(tick, interval * 1000);
    }catch(e){
      showDebug(String(e));
    }
  })();
</script>
</body>
</html>

YouTube Number Overlay v2.1 — Só o número (OBS) — COM DEBUG
-----------------------------------------------------------
Novidades:
- Corrige leitura quando o YouTube retorna o número como STRING (ex.: "1234").
- Modo DEBUG: ?debug=1 mostra status/erros no cantinho.
- Resolve links tipo https://youtube.com/@canal/live e /channel/UC...:
  • Busca o channelId a partir do @handle e descobre o vídeo AO VIVO atual.

Como usar:
1) Abra index.html, cole o link da live → Gerar link → cole no OBS (Browser Source).
2) Opcional: acrescente &transparent=1, &interval=10, &fontsize=64, &debug=1

API usada (YouTube Data API v3):
- Videos:    videos?part=liveStreamingDetails&id=VIDEO_ID&key=API_KEY
- Channels:  channels?part=id&forHandle=@handle&key=API_KEY
- Search:    search?part=id&channelId=UC...&eventType=live&type=video&key=API_KEY

Sua API key atual: AIzaSy... (oculta no arquivo config.json)

{
  "apiKey": "AIzaSyCqv78k5T-i4z2pJB7wq17VQktCh3wAx20",
  "videosTemplate": "https://www.googleapis.com/youtube/v3/videos?part=liveStreamingDetails&id={id}&key={key}",
  "channelsByHandleTemplate": "https://www.googleapis.com/youtube/v3/channels?part=id&forHandle={handle}&key={key}",
  "liveSearchTemplate": "https://www.googleapis.com/youtube/v3/search?part=id&channelId={channelId}&eventType=live&type=video&maxResults=1&key={key}",
  "concurrentViewersPath": "items.0.liveStreamingDetails.concurrentViewers",
  "defaultFontSize": 42,
  "defaultInterval": 10
}
